generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @default("No description provided")
  tasks       Task[]   @relation("ProjectTasks") // One-to-many relation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  status      String    @default("Pending")

  projectId   Int
  project     String    // Project name

  owner       String
  members     String[]  // store member names as array

  url             String?   // ðŸ‘ˆ NEW: optional URL field

  dependentTaskId Int[]    @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation to Project
  projectRel  Project   @relation("ProjectTasks", fields: [projectId], references: [id])

  // ðŸ‘‡ Relation to messages
  messages    Message[]

  // Task TaskHistory
  histories   TaskChangeHistory[]   // ðŸ‘ˆ relation to TaskHistory
  uploadedFiles UploadedFile[]

}

model Message {
  id              Int       @id @default(autoincrement())
  taskId          Int       // Foreign key to Task
  conversation    Json      // All messages stored as JSON array
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ðŸ‘‡ Relation to Task
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId]) // One conversation per task
}

model UploadedFile {
  id            Int      @id @default(autoincrement())
  originalName  String   // Original filename
  fileName      String   // Stored filename
  filePath      String   // Path on server
  mimeType      String   // File type
  size          Int      // File size in bytes
  taskId        Int?     // Associated task ID
  messageId     String?  // Associated message ID
  uploadDate    DateTime @default(now())
  task          Task?    @relation(fields: [taskId], references: [id])

  @@map("uploaded_files")
}

model TaskChangeHistory {
  id             Int      @id @default(autoincrement())
  taskId         Int
  fieldChanged   String   // "status" or "owner"
  oldValue       String?
  newValue       String?
  changedAt      DateTime @default(now())
  changeGroupId  String   @default(uuid()) // ðŸ‘ˆ unique per update operation

  task           Task     @relation(fields: [taskId], references: [id])
}

model DeveloperPerformanceMetric {
  id                 Int       @id @default(autoincrement())
  developerId        Int
  periodType         PeriodType
  startDate          DateTime
  endDate            DateTime

  cycleEfficiency    Float?
  totalLeadHours     Float?
  totalActiveHours   Float?
  completedTaskCount Int?

  deliveryRatePerDay Float?
  completedCount     Int?

  reworkRatio        Float?
  totalReopened      Int?

  computedAt         DateTime   @default(now())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@unique([developerId, periodType, startDate, endDate])
}

enum PeriodType {
  daily
  weekly
  monthly
}

